<?php
/**
 * @file
 * Custom views functionalities for CSC site.
 */

/**
 * Implements hook_menu().
 *
 */
function csc_views_menu() {
  $items['biblio/titles/list_callback'] = array(
    'page callback' => 'biblio_title_list_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function csc_views_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'biblio_search_api') {
    if ($form_state['view']->current_display == 'page') {
      drupal_add_js('sites/all/libraries/cookie.js/jquery.cookie.js', 'file');
      $filter_options = (arg(1) == '' && get_filter_node_ids()) ? get_filter_node_ids() : '';
      $form['#attributes'] = array('class' => array('csc-custom-search-form'));
      $form['search_api_views_fulltext']['#autocomplete_path'] = 'biblio/titles/list_callback';
      $form['biblio_publication_type']['#type'] = 'select';
      $form['biblio_publication_type']['#size'] = NULL;
      $form['biblio_publication_type']['#options'] =  csc_views_publication_type($filter_options);
      $form['biblio_authors']['#type'] = 'select';
      $form['biblio_authors']['#size'] = NULL;
      $form['biblio_authors']['#options'] =  csc_views_indexed_author($filter_options);
      $form['biblio_publisher']['#type'] = 'select';
      $form['biblio_publisher']['#size'] = NULL;
      $form['biblio_publisher']['#options'] =  csc_views_indexed_publisher($filter_options);
      $form['biblio_place_published']['#type'] = 'select';
      $form['biblio_place_published']['#size'] = NULL;
      $form['biblio_place_published']['#options'] =  csc_views_indexed_location($filter_options);
      $form['field_zotero_tags']['#type'] = 'select';
      $form['field_zotero_tags']['#size'] = NULL;
      $form['field_zotero_tags']['#options'] =  csc_views_zotero_tags($filter_options);
      $form['biblio_year']['#prefix'] = '<div class="publication-year"><label>Year</label></div>';
      $form['biblio_year']['#attributes'] = array('placeholder' => array('From'));
      $form['biblio_year_1']['#attributes'] = array('placeholder' => array('To'));
      $form['advanced_search_fieldset'] = array(
        '#type' => 'fieldset', 
        '#title' => '',   
        '#collapsed' => TRUE,
        '#weight' => 1,
        '#attributes' => array(
          'class' => array('advanced-search-container'),
        ),
      );
      $form['advanced_search_fieldset']['condition_option'] = array(
        '#type' => 'select',
        '#options' => array(
          'all' => t('All'),
          'any' => t('Any'),
        ),
        '#prefix' => '<div class="operation-option-container">' . t('Find items that match'),
        '#suffix' => ' ' . t('of the fields below') . '</div>',
      );
      $form['advanced_search_fieldset']['advanced_biblio_publication_type'] = $form['biblio_publication_type'];
      $form['advanced_search_fieldset']['advanced_biblio_publication_type']['#title'] = t('Source type');
      $form['advanced_search_fieldset']['title'] = $form['title'];
      $form['advanced_search_fieldset']['title']['#title'] = t('Title');
      $form['advanced_search_fieldset']['search_text_biblio_author'] = $form['search_text_biblio_author'];
      $form['advanced_search_fieldset']['search_text_biblio_author']['#title'] = t('Author');
      $form['advanced_search_fieldset']['search_text_biblio_publisher'] = $form['search_text_biblio_publisher'];
      $form['advanced_search_fieldset']['search_text_biblio_publisher']['#title'] = t('Publisher');
      $form['advanced_search_fieldset']['search_text_biblio_publish_place'] = $form['search_text_biblio_publish_place'];
      $form['advanced_search_fieldset']['search_text_biblio_publish_place']['#title'] = t('Place of Publication');
      $form['advanced_search_fieldset']['search_text_biblio_abstract'] = $form['search_text_biblio_abstract'];
      $form['advanced_search_fieldset']['search_text_biblio_abstract']['#title'] = t('Abstract');
      $form['advanced_search_fieldset']['search_text_zotero_tags'] = $form['search_text_zotero_tags'];
      $form['advanced_search_fieldset']['search_text_zotero_tags']['#title'] = t('Tags');
      $form['advanced_search_fieldset']['advanced_search_publication_year'] = array(
        '#type' => 'radios',
        '#title' => t('Year of Publication'),
        '#options' => array(
          date('Y') => t('Current'),
          date('Y', strtotime('-1 year')) => t('Last 12 months'),
          'range' => t('Range'),
        ),
        '#default_value' => 'range',
      );
      $form['advanced_search_fieldset']['advanced_search_start_year'] = $form['biblio_year'];
      $form['advanced_search_fieldset']['advanced_search_start_year']['#prefix'] = '';
      $form['advanced_search_fieldset']['advanced_search_start_year']['#default_value'] = '1942';
      $form['advanced_search_fieldset']['advanced_search_end_year'] = $form['biblio_year_1'];
      $form['advanced_search_fieldset']['advanced_search_end_year']['#default_value'] = date('Y');
      $form['search_api_views_fulltext']['#prefix'] = '<a href="#" class="open-search-field">Search</a><a href="#" class="clear-search-text" style="display: none;">x</a><div class="advanced-search-cta-container"><span class="source-type-selected-filter"></span><span class="field-selected-filter"></span><span class="year-selected-filter"></span></div>';
      $form['advanced_search_fieldset']['reset'] = array(
        '#type' => 'submit',
        '#value' => t('Clear'),
      );
      $form['advanced_search_fieldset']['submit'] = $form['submit'];
      unset($form['title']);
      unset($form['search_text_biblio_author']);
      unset($form['search_text_biblio_publisher']);
      unset($form['search_text_biblio_publish_place']);
      unset($form['search_text_biblio_abstract']);
      unset($form['search_text_zotero_tags']);
      $form['#validate'][] = 'csc_views_exposed_filter_validation';
      $form['default_min_max_publication_year'] = array(
        '#markup' => csc_views_get_unfiltered_min_max_year('views-attach'),
      );
    }
  }
}

/**
 * Returns auto complete search values
 */
function biblio_title_list_callback($string = '') {
  $string = ucfirst($string);
  $matches = array();
  if (!empty($string) && strlen($string) >= 3) {
    $titles = db_query_range('SELECT n.title, n.nid, y.value FROM {node} as n LEFT JOIN {search_api_db_database_node_index_biblio_year} as y ON n.nid = y.item_id WHERE n.title LIKE :value ORDER BY title ASC', 0, 3, array(':value' => db_like($string) . '%'));
    if ($titles->rowCount() != 0) {
      // Load views for biblio full content
      $biblio_full_results = csc_views_get_views_results('biblio_search_api', 'biblio_full');
      foreach ($titles as $key => $node) {
        $title_authors = db_query_range('SELECT value FROM {search_api_db_database_node_index_biblio_authors} WHERE item_id = :nid', 0, 3, array(':nid' => $node->nid));
        $title_author = '';
        // Attach current biblio item page
        foreach ($biblio_full_results as $biblio_full_result_key => $value) {
          if ($value->entity == $node->nid) $current_page = $biblio_full_result_key;
        }
        // Attach authors
        foreach ($title_authors as $author_data_key => $author_data) {
          $title_author .= ($author_data_key != 0) ? ', ' . $author_data->value : $author_data->value;
        }
        // Attach publication year
        $year = ($node->value != 0) ? '(' . $node->value . ')': '';
        $matches['node=' . $node->nid . '=' . $current_page] = ($key == 0) ? '<span class="result-item-type title-group-label">' . t('Titles') . '</span><span class="title-group">' . $node->title . ' ' . $year . '<br/>' . $title_author . '</span>' : '<span class="title-group">' . $node->title . ' ' . $year . '<br/>' . $title_author . '</span>';
      }
    }
    $authors = db_query_range('SELECT value FROM {search_api_db_database_node_index_biblio_authors} WHERE value LIKE :value ORDER BY value ASC', 0, 3, array(':value' => db_like($string) . '%'));
    if ($authors->rowCount() != 0) {
      foreach ($authors as $key => $author) {
        $matches['author=' . $author->value] = ($key == 0) ? '<span class="result-item-type authors-group-label">' . t('Authors') . '</span><span class="authors-group">' . $author->value . '</span>' : '<span class="authors-group">' . $author->value . '</span>';
      }
    }
    $publishers = db_query_range('SELECT value FROM {search_api_db_database_node_index_biblio_publisher} WHERE value LIKE :value ORDER BY value ASC', 0, 3, array(':value' => db_like($string) . '%'));
    if ($publishers->rowCount() != 0) {
      foreach ($publishers as $key => $publisher) {
        $matches['publisher=' . $publisher->value] = ($key == 0) ? '<span class="result-item-type publishers-group-label">' . t('Publishers') . '</span><span class="publishers-group">' . $publisher->value . '</span>' : '<span class="publishers-group">' . $publisher->value . '</span>';
      }
    }
    $placed_published = db_query_range('SELECT value FROM {search_api_db_database_node_index_biblio_place_published} WHERE value LIKE :value ORDER BY value ASC', 0, 3, array(':value' => db_like($string) . '%'));
    if ($placed_published->rowCount() != 0) {
      foreach ($placed_published as $key => $place) {
        $matches['publishplace=' . $place->value] = ($key == 0) ? '<span class="result-item-type place_published-group-label">' . t('Place of Publication') . '</span><span class="place-published-group">' . $place->value . '</span>' : '<span class="place-published-group">' . $place->value . '</span>';
      }
    }
    $tags = db_query_range('SELECT name, tid FROM {taxonomy_term_data} WHERE name LIKE :name ORDER BY name ASC', 0, 3, array(':name' => db_like($string) . '%'));
    if ($tags->rowCount() != 0) {
      foreach ($tags as $key => $tag) {
        $matches['tag=' . $tag->tid] = ($key == 0) ? '<span class="result-item-type tags-group-label">' . t('Tags') . '</span><span class="tags-group">' . $tag->name . '</span>' : '<span class="tags-group">' . $tag->name . '</span>';
      }
    } 
  }
  drupal_json_output($matches);
}

function csc_views_exposed_filter_validation($form, &$form_state) {
  if ($form_state['values']['biblio_year'] > $form_state['values']['biblio_year_1']) {
    form_set_error('biblio_year', '"From" year value should be lower than "To" year value');
  }
  if ($form_state['values']['biblio_year_1'] < $form_state['values']['biblio_year']) {
    form_set_error('biblio_year_1', '"To" year value should be higher than "From" year value');
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function csc_views_entity_property_info_alter(&$info) {
  $info['node']['properties']['sort_biblio_author'] = array(
    'type' => 'text',
    'label' => t('Sorting Biblio Author'),
    'getter callback' => 'csc_views_search_api_property_sort_biblio_author_getter_callback',
  );
  $info['node']['properties']['sort_stripped_node_title'] = array(
    'type' => 'text',
    'label' => t('Sorting Stripped Node Title'),
    'getter callback' => 'csc_views_search_api_property_sort_stripped_node_title_getter_callback',
  );
  $info['node']['properties']['sort_custom_publication_year'] = array(
    'type' => 'text',
    'label' => t('Sorting Custom Publication Year'),
    'getter callback' => 'csc_views_search_api_property_sort_custom_publication_year_getter_callback',
  );
  $info['node']['properties']['biblio_publication_type'] = array(
    'type' => 'text',
    'label' => t('Publication Type'),
    'getter callback' => 'csc_views_search_api_property_biblio_publication_type_getter_callback',
  );
  $info['node']['properties']['search_text_biblio_author'] = array(
    'type' => 'text',
    'label' => t('Search text biblio authors'),
    'getter callback' => 'csc_views_search_api_property_search_text_biblio_author_getter_callback',
  );
  $info['node']['properties']['search_text_biblio_publisher'] = array(
    'type' => 'text',
    'label' => t('Search text publisher'),
    'getter callback' => 'csc_views_search_api_property_search_text_biblio_publisher_getter_callback',
  );
  $info['node']['properties']['search_text_biblio_publish_place'] = array(
    'type' => 'text',
    'label' => t('Search text publish place'),
    'getter callback' => 'csc_views_search_api_property_search_text_biblio_publish_place_getter_callback',
  );
  $info['node']['properties']['search_text_biblio_abstract'] = array(
    'type' => 'text',
    'label' => t('Search text abstract'),
    'getter callback' => 'csc_views_search_api_property_search_text_biblio_abstract_getter_callback',
  );
  $info['node']['properties']['search_text_zotero_tags'] = array(
    'type' => 'text',
    'label' => t('Search text zotero tags'),
    'getter callback' => 'csc_views_search_api_property_search_text_zotero_tags_getter_callback',
  );
}

/**
 * Returns node biblio author value.
 */
function csc_views_search_api_property_sort_biblio_author_getter_callback($item) {
  $node = node_load($item->nid);
  $author_names = array();
  foreach ($node->biblio_contributors as $author) {
    if (!empty($author['lastname'])) {
      $author_names[] = $author['lastname'];
    }
  }
  return $author_names[0];
}

/**
 * Return only alphanumeric characters and remove specific words from sorting.
 */
function csc_views_search_api_property_sort_stripped_node_title_getter_callback($item) {
  $title = preg_replace('/[^A-Za-z0-9]/', '', $item->title);
  $wordlist = array('a', 'an', 'the');
  $stripped_title = str_ireplace($wordlist, '', $title);
  return $stripped_title;
}

/**
 * Return empty publication years with the current year + 1 year for it to be placed on the last row of views result.
 */
function csc_views_search_api_property_sort_custom_publication_year_getter_callback($item) {
  // We assign numeric equivalent for specific values, so we could use them for sorting
  switch ($item->biblio_year) {
    case '0':
      $year = date('Y', strtotime('+1 year'));
      break;
    case 'Submitted':
      $year = '1';
      break;
    case 'In Press':
      $year = '2';
      break;
    default:
    $year = $item->biblio_year;
  }    
  return $year;
}

/**
 * Returns publication type value.
 */
function csc_views_search_api_property_biblio_publication_type_getter_callback($item) {
  $node = node_load($item->nid);
  return $node->biblio_type;
}

/**
 * Returns biblio author value.
 */
function csc_views_search_api_property_search_text_biblio_author_getter_callback($item) {
  $node = node_load($item->nid);
  $author_names = '';
  foreach ($node->biblio_contributors as $author) {
    if (!empty($author['name'])) {
      $author_names .= $author['name'] . ' ';
    }
  }
  return $author_names;
}

/**
 * Returns biblio publisher value.
 */
function csc_views_search_api_property_search_text_biblio_publisher_getter_callback($item) {
  return $item->biblio_publisher;
}

/**
 * Returns biblio publish place value.
 */
function csc_views_search_api_property_search_text_biblio_publish_place_getter_callback($item) {
  return $item->biblio_place_published;
}

/**
 * Returns biblio abstract value.
 */
function csc_views_search_api_property_search_text_biblio_abstract_getter_callback($item) {
  return $item->biblio_abst_e;
}

/**
 * Returns zotero tags value.
 */
function csc_views_search_api_property_search_text_zotero_tags_getter_callback($item) {
  $node = node_load($item->nid);
  $tags = '';
  foreach ($node->field_zotero_tags['und'] as $tag) {
    if (!empty($tag['tid'])) {
      $term = taxonomy_term_load($tag['tid']);
      $tags .= $term->name . ' ';
    }
  }
  return $tags;
}

/**
 * Implements hook_block_info().
 */
function csc_views_block_info() {
  $blocks['custom_sort_filter'] = array(
    'info' => t('Custom views filter'),
  );
  $blocks['custom_taxonomy_block'] = array(
    'info' => t('Custom taxonomy block'),
    'region' => 'sidebar_first',
  );
  $blocks['custom_taxonomy_breadcrumb'] = array(
    'info' => t('Custom taxonomy breadcrumb'),
    'region' => 'content',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function csc_views_block_view($delta = '') {
  $vocabulary = taxonomy_vocabulary_machine_name_load('collections');
  $vid  = $vocabulary->vid;
  switch ($delta) {
    case 'custom_sort_filter':
      $block['subject'] = '';
      $block['content'] = (!search_landing_page()) ? csc_views_custom_sort_block_content() : '';
      break;
    case 'custom_taxonomy_block':
      $block['subject'] = (search_landing_page()) ? t('Browse') : '';
      $block['content'] = (search_landing_page()) ? csc_views_generate_list(csc_views_build_taxonomy_tree($vid, 0)) : '';
      break;
    case 'custom_taxonomy_breadcrumb':
      $block['subject'] = t('CSC: Taxonomy Block');
      $block['content'] = (!empty($_GET['field_zotero_collections'])) ? collection_breadcrumb($_GET['field_zotero_collections']) . ' ' . csc_views_breadcrumb_library($vid) : csc_views_breadrumb_output() . '' . csc_views_breadcrumb_library($vid);
      break;
  }
  return $block;
}

function csc_views_custom_sort_block_content() {
  $publish_year_values = csc_views_get_min_max_year('biblio_search_api', 'page', 'views-custom-sort');
  $published_year = (!empty($publish_year_values)) ? $publish_year_values : csc_views_get_unfiltered_min_max_year('views-custom-sort');
  $custom_sort_block_content = '<div class="detail-level-container"><span>Detail</span><ul class="detail-level-option"><li><a id="short-detail" href="#">Short</a></li>
    <li><a id="medium-detail" class="active" href="#">Medium</a></li><li><a id="long-detail" href="#">Long</a></li></ul></div>
    <div class="custom-sort-container"><select id="edit-custom-sort" name="custom_sort" class="form-select">
    <option value="default" selected="selected">' . t('Sort by') . '</option>
    <optgroup label="Title"><option value="title_asc">A-Z</option><option value="title_desc">Z-A</option></optgroup>
    <optgroup label="Author"><option value="author_asc">A-Z</option><option value="author_desc">Z-A</option></optgroup>
    <optgroup label="Year"><option value="year_asc">' . $published_year['asc'] . '</option><option value="year_desc">' . $published_year['desc'] . '</option></optgroup>
    </select></div>';
  return $custom_sort_block_content;
}

function csc_views_breadcrumb_library($vid) {
  $content = '<div class="library-dropdown" style="display: none;"><div class="inner-library"><div class="view-all-library-container">
    ' . l(t('View all sources'), 'csc-search', array('query' => array('field_zotero_collections' => 'All'))) . '</div>' . csc_views_generate_list(csc_views_build_taxonomy_tree($vid, 0)) . '</div></div>';
  return $content;
}

/**
 * Generates & returns a nested array of taxonomy terms for the specified vocabulary id.
 */
function csc_views_build_taxonomy_tree($vid, $parent = 0) {
  static $results;
  $args = func_get_args();
  $hash = md5(implode('-', $args));
  if (!isset($results[$hash])) {
    $terms = array();
    $data = taxonomy_get_tree($vid, $parent);
    foreach ($data as $term) {
      $terms[$term->tid] = $term;
    }
    $terms = csc_views_nest_taxonomy_terms($terms, $parent);
    $results[$hash] = $terms;
  }
  return $results[$hash];
}

/**
 * Looks for each term's parent term in the given tree and assigns the child to the parent.
 */
function csc_views_nest_taxonomy_terms($terms, $parent) {
  foreach ($terms as $term) {
    $parent_tid = isset($term->parents[0]) ? $term->parents[0] : 0;
    if ($parent_tid) {
      if (isset($terms[$parent_tid])) {
        $terms[$parent_tid]->children[$term->tid] = $term;
        unset($terms[$term->tid]);
      }
      elseif ($parent_tid != $parent) {
        csc_views_nest_taxonomy_terms_child($terms, $parent_tid, $term);
        unset($terms[$term->tid]);
      }
    }
  }
  return $terms;
}

/**
 * Recursive function which nests the child element within the appropriate parent element in the given terms tree.
 */
function csc_views_nest_taxonomy_terms_child(&$terms, $parent_tid, $child) {
  foreach ($terms as &$term) {
    if ($term->tid == $parent_tid) {
      $term->children[$child->tid] = $child;
      break;
    }
    elseif (!empty($term->children)) {
      csc_views_nest_taxonomy_terms_child($term->children, $parent_tid, $child);
    }
  }
}

/**
 * Generates a nested HTML list from hierarchy items.
 */
function csc_views_generate_list($hierarchy) {
  $items = array();
  foreach ($hierarchy as $term) {
    $class_name = (!empty($term->children)) ? 'has-children' : '';
    $item = l(t($term->name), 'csc-search',  array(
      'query' => array(
        'field_zotero_collections' => $term->tid
      ),
      'attributes' => array(
        'class' => array($class_name)
      ),
    ));
    if (!empty($term->children)) {
      $item .= csc_views_generate_list($term->children);
    }
    $items[] = $item;
  }
  return theme('item_list', array('items' => $items));
}

/**
 *  Returns breadcrumb links.
 */
function collection_breadcrumb($term_id) {
  $breadcrumb = NULL;
  $parameter = explode('&', $_SERVER['QUERY_STRING']);
  if ((count($parameter) == 1 && current_path() == 'csc-search') || (current_path() == 'csc-search/biblio' && count($parameter) <= 3 &&
  !empty($_GET['field_zotero_collections'])) || (count($parameter) <= 4 && !empty($_GET['sort_by']) && !empty($_GET['sort_order']))) {
    if ($term_id != 'All') {
      $vocabulary = taxonomy_vocabulary_machine_name_load('collections');
      $vid  = $vocabulary->vid;
      $get_parents = taxonomy_get_parents_all($term_id);
      $taxonomy_term = array_reverse($get_parents);
      foreach ($taxonomy_term as $key => $term) {
        $current_breadcrumb = ((count($taxonomy_term) - 1) == $key) ? 'current_breadcrumb' : '' ;
        $breadcrumb .= '<div class="breadcrumb-item non-default-item ' . $current_breadcrumb . '">';
        $term_list = csc_views_build_taxonomy_tree($vid, $term->tid);
        if ($term_list) {
          $breadcrumb .= l(t($term->name), '',  array(
            'fragment' => '',
            'attributes' => array('class' => 'breadcrumb-dropdown-cta')
          ));
          $breadcrumb_term_child = csc_views_generate_list($term_list);
          $breadcrumb .= '<div class="breadcrumb-child-container" style="display: none;"><div class="inner-breadcrumb-child-container">
          <div class="breadcrumb-child-top">' . l(t('View all sources for ' . $term->name), 'csc-search', array('query' => array('field_zotero_collections' => $term->tid))) . '</div>
          <div class="breadcrumb-child-sub-top">' . l(t($term->name), current_path(), array('query' => array('field_zotero_collections' => $term->tid))) . '</div>
          <div class="breadcrumb-child">' . $breadcrumb_term_child . '</div></div></div>';
        }
        else {
          $breadcrumb .= $term->name;
        }
        $breadcrumb .= '</div>';
      }
    }
  } 
  return csc_views_breadrumb_output($breadcrumb);
}

function csc_views_breadrumb_output($breadcrumb_content = NULL) {
  $home_link = '<div class="breadcrumb-item">' . l(t('Home'), 'csc-search', array('attributes' => array('class' => array('home-search-page')))) . '&nbsp;</div>';
  $library_link = '<div class="breadcrumb-item">' . l(t('Library'), '', array('attributes' => array('id' => 'collection-library'), 'fragment' => '')) . '</div>';
  $search_result_text = '<span class="breadcrumb-item non-default-item current_breadcrumb">' . t('Search Results') . '</span>';
  $search_result_filtered_text = '<span class="breadcrumb-item non-default-item current_breadcrumb">' . t('Search Results (Filtered)') . '</span>';
  if (!empty($breadcrumb_content)) {
    $breadcrumb_output = $breadcrumb_content;
  }
  else {
    $breadcrumb_output = $search_result_text;
    if (!empty($_GET['field_zotero_collections'])) {
      if ($_GET['field_zotero_collections'] == 'All' && count(explode('&', $_SERVER['QUERY_STRING'])) <= 2) {
        $breadcrumb_output = '';
      }
      else {
        $breadcrumb_output = (empty($_GET['biblio_publication_type']) && empty($_GET['biblio_authors']) && empty($_GET['biblio_publisher']) && empty($_GET['biblio_place_published'])
        && empty($_GET['biblio_year']) && empty($_GET['biblio_year_1']) && empty($_GET['field_zotero_tags'])) ? $search_result_text : $search_result_filtered_text;
      }
    }
    if ((count(explode('&', $_SERVER['QUERY_STRING'])) <= 3) && (!empty($_GET['field_zotero_tags']) || !empty($_GET['biblio_publisher'])) || !empty($_GET['biblio_place_published']) || !empty($_GET['biblio_authors'])) {
      $breadcrumb_output = $search_result_filtered_text;
    }
  }
  if (!empty($_SERVER['QUERY_STRING'])) return $home_link . ' ' . $library_link . ' ' . $breadcrumb_output;
}

function search_landing_page() {
  $query_string = explode('&', $_SERVER['QUERY_STRING']);
  if (empty($query_string[0])) return TRUE;
}

/**
 * Implements hook_views_pre_render().
 */
function csc_views_views_pre_render(&$view) {
  drupal_add_js(drupal_get_path('module', 'csc_views') . '/csc_views.js');
  if ($view->name == 'biblio_search_api' && !empty($view->exposed_input) && !empty($view->result)) {
    $first_row = ($view->query->pager->current_page != 0) ? ($view->query->pager->current_page * $view->query->pager->options['items_per_page']) + 1 : 1;
    $last_row = ($first_row + count($view->result)) - 1;
    $max_page = ceil($view->query->pager->total_items/$view->query->pager->options['items_per_page']);
    $next_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? custom_pager_links($view, '>', $view->query->pager->current_page + 1) : '';
    $prev_page_link = ($view->query->pager->current_page != 0) ? custom_pager_links($view, '<', $view->query->pager->current_page - 1) : '';
    $current_page = $view->query->pager->current_page + 1;
    $first_page_link = ($view->query->pager->current_page != 0) ? custom_pager_links($view, '<<', 0) : '';
    $last_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? custom_pager_links($view, '>>', $max_page - 1) : '';
    $current_row_list = ($view->current_display != 'biblio_full') ? $first_row . ' - ' . $last_row : $first_row;
    $view->attachment_after = '<div class="custom-footer-pager"><div class="custom-footer-pager-left">Displaying ' . $current_row_list . ' of ' 
    . $view->query->pager->total_items . ' found</div><div class="custom-footer-pager-right">' . $first_page_link . ' ' . $prev_page_link . '<span>' . t('Page') . '</span><input type="text" 
    name="pager-input" id="pager-input" value="' . $current_page . '"/>of ' . $max_page . ' ' . $next_page_link . ' ' . $last_page_link . '</div><input type="hidden" value="' 
    . $max_page . '" id="max-page-input"></div>';
    // Attach hidden input with min/max publication year values
    $view->attachment_after .= csc_views_get_min_max_year('biblio_search_api', 'page', 'views-attach');
  }
}

/**
 * Returns custom pager link.
 */
function custom_pager_links($view, $pager_text, $pager_link) {
  $query_strings = array();
  foreach ($view->exposed_input as $key => $value) {
    $query_strings[$key] = $value;
  }
  $pager = array('page' => $pager_link);
  array_push($query_strings, $pager);
  $link_output = l($pager_text, current_path(), array('query' => $query_strings));
  return $link_output;
}

/**
 * Returns node ids for option filter
 */
function get_filter_node_ids() {
  $filter_ids = views_get_current_view();
  if (!empty($filter_ids->result)) {
    $node_ids = array();
    foreach ($filter_ids->result as $node_val) {
      $node_ids[] = $node_val->entity;
    }
    return $node_ids;
  }
  else {
    return false;
  }
}

function get_node_id_query($query) {
  $node_ids = array();
  foreach ($query as $data) {
    $node_ids[] = $data->item_id;
  }
  return $node_ids;
}

/**
 * Returns publication types.
 */
function csc_views_publication_type($filter_ids) {
  $publication = array('' => 'Select Source Type');
  if (!empty($filter_ids)) {
    $query = db_query('SELECT bt.tid, bt.name FROM {biblio_types} as bt LEFT JOIN {search_api_db_database_node_index_biblio_publication_type} as pt ON bt.tid = pt.value WHERE pt.item_id in (:node_ids)', array(':node_ids' => $filter_ids));
  }
  else {
    $query = db_query('SELECT tid, name FROM {biblio_types}');
  }
  foreach ($query as $data) {
    $publication[$data->tid] = $data->name;
  }
  return $publication;
}

/**
 * Returns indexed authors.
 */
function csc_views_indexed_author($filter_ids) {
  $author = array('' => 'Select Author');
  if (!empty($filter_ids)) {
    $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_authors} WHERE item_id in (:item_id) and value <> :val', array(':item_id' => $filter_ids, ':val' => ''));
  }
  else {
    $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_authors} WHERE value <> :val', array(':val' => ''));
  }
  foreach ($query as $data) {
    $author[$data->value] = $data->value;
  }
  return $author;
}
 
/**
 * Returns indexed publishers.
 */
function csc_views_indexed_publisher($filter_ids) {
  $publisher = array('' => 'Select Publisher');
  if (!empty($filter_ids)) {
    $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_publisher} WHERE item_id in (:item_id) and value <> :val', array(':item_id' => $filter_ids, ':val' => ''));
  }
  else {
    $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_publisher} WHERE value <> :val', array(':val' => ''));
  }
  foreach ($query as $data) {
    $publisher[$data->value] = $data->value;
  }
  return $publisher;
}

/**
 * Returns indexed publish location.
 */
function csc_views_indexed_location($filter_ids) {
  $location = array('' => 'Select Location');
  if (!empty($filter_ids)) {
    $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_place_published} WHERE item_id in (:item_id) and value <> :val', array(':item_id' => $filter_ids, ':val' => ''));
  }
  else {
    $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_place_published} WHERE value <> :val', array(':val' => ''));
  }
  foreach ($query as $data) {
    $location[$data->value] = $data->value;
  }
  return $location;
}

/**
 * Returns zotero tags.
 */
function csc_views_zotero_tags($filter_ids) {
  $tag = array('' => 'Select Tags');
  if (!empty($filter_ids)) {
    $query_tags = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_field_zotero_tags} WHERE item_id in (:item_id) and value <> :val', array(':item_id' => $filter_ids, ':val' => ''));
    foreach ($query_tags as $data) {
      $taxonomy_tag = taxonomy_term_load($data->value);
      $tag[$data->value] = $taxonomy_tag->name;
    }
  }
  else {
    $zotero_vocabulary = taxonomy_vocabulary_machine_name_load('zotero_tags');
    $query_tags = taxonomy_get_tree($zotero_vocabulary->vid);
    foreach ($query_tags as $term) {
      $tag[$term->tid] = $term->name;
    }
  }
  return $tag;
}

/**
 * Returns filtered min/max publication year
 */
function csc_views_get_min_max_year($view_id, $display_id, $return_option) {
  $biblio_views_result = csc_views_get_views_results($view_id, $display_id);
  $filtered_publication_years = array();
  foreach ($biblio_views_result as $node_data) {
    $publication_year = db_query('SELECT DISTINCT(yr.value) FROM {search_api_db_database_node_index_biblio_year} yr WHERE yr.value <> :year_val and yr.item_id = :item_id_val', array(':year_val' => 0, ':item_id_val' => $node_data->entity));
    foreach ($publication_year as $year_data) {
      $filtered_publication_years[] = $year_data->value;
    }
  }
  return csc_views_year_ouput($filtered_publication_years, 'filtered', $return_option);
}

/**
 * Returns unfiltered min/max publication year
 */
function csc_views_get_unfiltered_min_max_year($return_option) {
  $result = db_query('SELECT DISTINCT(yr.value) FROM {search_api_db_database_node_index_biblio_year} yr WHERE yr.value <> :year_val', array(':year_val' => 0));
  $unfiltered_filtered_publication_years = array();
  foreach ($result as $year_data) {
    $unfiltered_filtered_publication_years[] = $year_data->value;
  }
  return csc_views_year_ouput($unfiltered_filtered_publication_years, 'unfiltered', $return_option);
}

/**
 * Returns unfiltered min/max publication year output
 */
function csc_views_year_ouput($publication_years, $result_option, $return_option) {
  if (!empty($publication_years)) {
    $latest_year = max($publication_years);
    $earliest_year = min($publication_years);
    switch ($return_option) {
      case 'views-attach':
        if ($result_option == 'filtered') {
          $output = '<input type="hidden" id="latest-published-year" value="' . $latest_year . '" />';
          $output .= '<input type="hidden" id="earliest-published-year" value="' . $earliest_year . '" />';
        }
        else {
          $output = '<input type="hidden" id="unfiltered-latest-published-year" value="' . $latest_year . '" />';
          $output .= '<input type="hidden" id="unfiltered-earliest-published-year" value="' . $earliest_year . '" />';
        }
        break;
      case 'views-custom-sort':
        $output = array('asc' => $earliest_year . ' - ' . $latest_year, 'desc' =>  $latest_year . ' - ' . $earliest_year);
        break;
    }
  }
  else {
    $output = NULL;
  }
  return $output;
}
 
/**
 * Implements hook_views_pre_build().
 */
function csc_views_views_pre_build(&$view) {
  if ($view->name == 'biblio_search_api' && !empty($_GET['condition_option'])) {
    if ($_GET['condition_option'] == 'any') {
      $view->display_handler->options['filter_groups']['groups'][1] = 'OR';
    }
  }
}

/**
 *  Returns views result values.
 */
 function csc_views_get_views_results($views_id, $display_id) {
  $get_view = views_get_view($views_id);
  $get_view->set_display($display_id);
  $get_view->set_items_per_page(0);
  $get_view->pre_execute();
  $get_view->execute();
  return $get_view->result;
}
