<?php
/**
 * @file
 * Custom views functionalities for CSC site.
 */

/**
 * Implements hook_form_alter().
 */
function csc_views_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'biblio_search_api_dev' && $form_state['view']->current_display == 'page') {
    $form['sort_by']['#prefix'] = '<div style="display: none;">';
    $form['sort_by']['#suffix'] = '</div>';
    $form['sort_order']['#prefix'] = '<div style="display: none;">';
    $form['sort_order']['#suffix'] = '</div>';
    $form['field_zotero_collections']['#prefix'] = '<div style="display: none;">';
    $form['field_zotero_collections']['#suffix'] = '</div>';
    if (!search_landing_page()) {
      $form['custom_sort'] = array(
        '#type' => 'select',
        '#title' => 'Sort',
        '#options' => array(
          'default' => t('Default'),
          'Title' => array(
            'title_asc' => t('A-Z'),
            'title_desc' => t('Z-A')
          ),
          'Author' => array(
            'author_asc' => t('A-Z'),
            'author_desc' => t('Z-A')
          ),
          'Year' => array(
            'year_asc' => t('1492-2014'),
            'year_desc' => t('2014-1492')
          ),
        ),
        '#default_value' => 'default',
      );
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function csc_views_entity_property_info_alter(&$info) {
 $info['node']['properties']['sort_biblio_author'] = array(
   'type' => 'text',
   'label' => t('Sorting Biblio Author'),
   'getter callback' => 'csc_views_search_api_property_sort_biblio_author_getter_callback',
 );
 $info['node']['properties']['sort_stripped_node_title'] = array(
   'type' => 'text',
   'label' => t('Sorting Stripped Node Title'),
   'getter callback' => 'csc_views_search_api_property_sort_stripped_node_title_getter_callback',
 );
 $info['node']['properties']['sort_custom_publication_year'] = array(
   'type' => 'text',
   'label' => t('Sorting Custom Publication Year'),
   'getter callback' => 'csc_views_search_api_property_sort_custom_publication_year_getter_callback',
 );
}

/**
 * Returns node biblio author value.
 */
function csc_views_search_api_property_sort_biblio_author_getter_callback($item) {
  $node = node_load($item->nid);
  $author_names = array();
  foreach ($node->biblio_contributors as $author) {
    if (!empty($author['lastname'])) {
      $author_names[] = $author['lastname'];
    }
  }
  return $author_names[0];
}

/**
 * Return only alphanumeric characters and remove specific words from sorting.
 */
function csc_views_search_api_property_sort_stripped_node_title_getter_callback($item) {
  $title = preg_replace('/[^A-Za-z0-9]/', '', $item->title);
  $wordlist = array('a', 'an', 'the');
  $stripped_title = str_ireplace($wordlist, '', $title);
  return $stripped_title;
}

/**
 * Return empty publication years with the current year + 1 year for it to be placed on the last row of views result.
 */
function csc_views_search_api_property_sort_custom_publication_year_getter_callback($item) {
  // We assign numeric equivalent for specific values, so we could use them for sorting
  switch ($item->biblio_year) {
    case '0':
      $year = date('Y', strtotime('+1 year'));
      break;
    case 'Submitted':
      $year = '1';
      break;
    case 'In Press':
      $year = '2';
      break;
    default:
    $year = $item->biblio_year;
  }    
  return $year;
}

/**
 * Implements hook_block_info().
 */
function csc_views_block_info() {
  $blocks['custom_taxonomy_block'] = array(
    'info' => t('Custom taxonomy block'),
    'region' => 'sidebar_first',
  );
  $blocks['custom_taxonomy_breadcrumb'] = array(
    'info' => t('Custom taxonomy breadcrumb'),
    'region' => 'content',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function csc_views_block_view($delta = '') {
  switch ($delta) {
    case 'custom_taxonomy_block':
      $vocabulary = taxonomy_vocabulary_machine_name_load('collections');
      $vid  = $vocabulary->vid;
      $block['subject'] = (search_landing_page()) ? t('Browse') : '';
      $block['content'] = (search_landing_page()) ? csc_views_generate_list(csc_views_build_taxonomy_tree($vid, 0)) : '';
      break;
    case 'custom_taxonomy_breadcrumb':
      $block['subject'] = t('CSC: Taxonomy Block');
      $block['content'] = (!empty($_GET['field_zotero_collections'])) ? collection_breadcrumb($_GET['field_zotero_collections']) : '';
      break;
  }
  return $block;
}

/**
 * Generates & returns a nested array of taxonomy terms for the specified vocabulary id.
 */
function csc_views_build_taxonomy_tree($vid, $parent = 0) {
  static $results;
  $args = func_get_args();
  $hash = md5(implode('-', $args));
  if (!isset($results[$hash])) {
    $terms = array();
    $data = taxonomy_get_tree($vid, $parent);
    foreach ($data as $term) {
      $terms[$term->tid] = $term;
    }
    $terms = csc_views_nest_taxonomy_terms($terms, $parent);
    $results[$hash] = $terms;
  }
  return $results[$hash];
}

/**
 * Looks for each term's parent term in the given tree and assigns the child to the parent.
 */
function csc_views_nest_taxonomy_terms($terms, $parent) {
  foreach ($terms as $term) {
    $parent_tid = isset($term->parents[0]) ? $term->parents[0] : 0;
    if ($parent_tid) {
      if (isset($terms[$parent_tid])) {
        $terms[$parent_tid]->children[$term->tid] = $term;
        unset($terms[$term->tid]);
      }
      elseif ($parent_tid != $parent) {
        csc_views_nest_taxonomy_terms_child($terms, $parent_tid, $term);
        unset($terms[$term->tid]);
      }
    }
  }
  return $terms;
}

/**
 * Recursive function which nests the child element within the appropriate parent element in the given terms tree.
 */
function csc_views_nest_taxonomy_terms_child(&$terms, $parent_tid, $child) {
  foreach ($terms as &$term) {
    if ($term->tid == $parent_tid) {
      $term->children[$child->tid] = $child;
      break;
    }
    elseif (!empty($term->children)) {
      csc_views_nest_taxonomy_terms_child($term->children, $parent_tid, $child);
    }
  }
}

/**
 * Generates a nested HTML list from hierarchy items.
 */
function csc_views_generate_list($hierarchy) {
  $items = array();
  foreach ($hierarchy as $term) {
    $class_name = (!empty($term->children)) ? 'has-children' : '';
    $item = l(t($term->name), 'csc-search-dev',  array(
      'query' => array(
        'field_zotero_collections' => $term->tid
      ),
      'attributes' => array(
        'class' => array($class_name)
      ),
    ));
    if (!empty($term->children)) {
      $item .= csc_views_generate_list($term->children);
    }
    $items[] = $item;
  }
  return theme('item_list', array('items' => $items));
}

/**
 *  Returns breadcrumb links.
 */
function collection_breadcrumb($term_id) {
  $get_parents = taxonomy_get_parents_all($term_id);
  $taxonomy_term = array_reverse($get_parents);
  $breadcrumb = '';
  foreach ($taxonomy_term as $key => $term) {
    if ($key == 0) {
      $breadcrumb .= l(t($term->name), 'csc-search-dev',  array(
        'query' => array(
          'field_zotero_collections' => $term->tid
        ),
      ));
    }
    else {
      $breadcrumb .= ' &#187; ';
      $breadcrumb .= l(t($term->name), 'csc-search-dev',  array(
        'query' => array(
          'field_zotero_collections' => $term->tid
        ),
      ));
    }
  }
  return $breadcrumb;
}

function search_landing_page() {
  if(!isset($_GET['search_api_views_fulltext']) && !isset($_GET['field_zotero_collections']) && !isset($_GET['sort_by']) && !isset($_GET['sort_order'])) {
    return TRUE;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function csc_views_views_pre_render(&$view) {
  if ($view->name == 'biblio_search_api_dev' && $view->exposed_input && !empty($view->result)) {
    $first_row = ($view->query->pager->current_page != 0) ? ($view->query->pager->current_page * $view->query->pager->options['items_per_page']) + 1 : 1;
    $last_row = ($first_row + count($view->result)) - 1;
    $max_page = ceil($view->query->pager->total_items/$view->query->pager->options['items_per_page']);
    $next_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? custom_pager_links($view, '>', $view->query->pager->current_page + 1) : '';
    $prev_page_link = ($view->query->pager->current_page != 0) ? custom_pager_links($view, '<', $view->query->pager->current_page - 1) : '';
    $current_page = $view->query->pager->current_page + 1;
    $first_page_link = ($view->query->pager->current_page != 0) ? custom_pager_links($view, '<<', 0) : '';
    $last_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? custom_pager_links($view, '>>', $max_page - 1) : '';
    $view->attachment_after = '<div class="custom-footer-pager"><div class="custom-footer-pager-left">Displaying ' . $first_row . ' - ' . $last_row . ' of ' 
    . $view->query->pager->total_items . ' found</div><div class="custom-footer-pager-right">' . $first_page_link . ' ' . $prev_page_link . '<input type="text" 
    name="pager-input" id="pager-input" value="' . $current_page . '"/>of ' . $max_page . ' ' . $next_page_link . ' ' . $last_page_link . '</div><input type="hidden" value="' . $max_page . '" id="max-page-input"></div>';
  }
}

/**
 * Returns custom pager link.
 */
function custom_pager_links($view, $pager_text, $pager_link) {
  $search_text = ($view->exposed_raw_input['search_api_views_fulltext']) ? $view->exposed_raw_input['search_api_views_fulltext'] : '';
  $collection_filter = ($view->exposed_raw_input['field_zotero_collections']) ? $view->exposed_raw_input['field_zotero_collections'] : '';;
  $sort_by = ($view->exposed_raw_input['sort_by']) ? $view->exposed_raw_input['sort_by'] : '';
  $sort_order = ($view->exposed_raw_input['sort_order']) ? $view->exposed_raw_input['sort_order'] : '';
  $custom_sort = ($view->exposed_raw_input['custom_sort']) ? $view->exposed_raw_input['custom_sort'] : '';
  $link_output = l($pager_text, arg(0), array(
    'query' => array(
      'search_api_views_fulltext' => $search_text,
      'field_zotero_collections' => $collection_filter,
      'sort_by' => $sort_by,
      'sort_order' => $sort_order,
      'custom_sort' => $custom_sort,
      'page' => $pager_link,
    )
  ));
  return $link_output;
}

