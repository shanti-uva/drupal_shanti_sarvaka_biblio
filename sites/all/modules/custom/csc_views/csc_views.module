<?php
/**
 * @file
 * Custom views functionalities for CSC site.
 */

/**
 * Implements hook_form_alter().
 */
function csc_views_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'biblio_search_api_dev' && $form_state['view']->current_display == 'page') {
    $form['#attributes'] = array('class' => array('csc-custom-search-form'));
    $form['sort_by']['#prefix'] = '<div style="display: none;">';
    $form['sort_by']['#suffix'] = '</div>';
    $form['sort_order']['#prefix'] = '<div style="display: none;">';
    $form['sort_order']['#suffix'] = '</div>';
    $form['field_zotero_collections']['#prefix'] = '<div style="display: none;">';
    $form['field_zotero_collections']['#suffix'] = '</div>';
    $form['biblio_publication_type']['#type'] = 'select';
    $form['biblio_publication_type']['#size'] = NULL;
    $form['biblio_publication_type']['#options'] =  csc_views_publication_type();
    $form['biblio_authors']['#type'] = 'select';
    $form['biblio_authors']['#size'] = NULL;
    $form['biblio_authors']['#options'] =  csc_views_indexed_author();
    $form['biblio_publisher']['#type'] = 'select';
    $form['biblio_publisher']['#size'] = NULL;
    $form['biblio_publisher']['#options'] =  csc_views_indexed_publisher();
    $form['biblio_place_published']['#type'] = 'select';
    $form['biblio_place_published']['#size'] = NULL;
    $form['biblio_place_published']['#options'] =  csc_views_indexed_location();
    $form['field_zotero_tags']['#type'] = 'select';
    $form['field_zotero_tags']['#size'] = NULL;
    $form['field_zotero_tags']['#options'] =  csc_views_zotero_tags();
    $form['biblio_year']['#prefix'] = '<div class="publication-year"><label>Year</label></div>';
    $form['biblio_year']['#suffix'] = '<span>To</span>';
    $form['biblio_year']['#attributes'] = array('placeholder' => array('From'));
    $form['biblio_year_1']['#attributes'] = array('placeholder' => array('To'));
    $form['#validate'][] = 'csc_views_exposed_filter_validation';
  }
}

function csc_views_exposed_filter_validation($form, &$form_state) {
  if ($form_state['values']['biblio_year'] > $form_state['values']['biblio_year_1']) {
    form_set_error('biblio_year', '"From" year value should be lower than "To" year value');
  }
  if ($form_state['values']['biblio_year_1'] < $form_state['values']['biblio_year']) {
    form_set_error('biblio_year_1', '"To" year value should be higher than "From" year value');
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function csc_views_entity_property_info_alter(&$info) {
 $info['node']['properties']['sort_biblio_author'] = array(
   'type' => 'text',
   'label' => t('Sorting Biblio Author'),
   'getter callback' => 'csc_views_search_api_property_sort_biblio_author_getter_callback',
 );
 $info['node']['properties']['sort_stripped_node_title'] = array(
   'type' => 'text',
   'label' => t('Sorting Stripped Node Title'),
   'getter callback' => 'csc_views_search_api_property_sort_stripped_node_title_getter_callback',
 );
 $info['node']['properties']['sort_custom_publication_year'] = array(
   'type' => 'text',
   'label' => t('Sorting Custom Publication Year'),
   'getter callback' => 'csc_views_search_api_property_sort_custom_publication_year_getter_callback',
 );
 $info['node']['properties']['biblio_publication_type'] = array(
   'type' => 'text',
   'label' => t('Publication Type'),
   'getter callback' => 'csc_views_search_api_property_biblio_publication_type_getter_callback',
 );
}

/**
 * Returns node biblio author value.
 */
function csc_views_search_api_property_sort_biblio_author_getter_callback($item) {
  $node = node_load($item->nid);
  $author_names = array();
  foreach ($node->biblio_contributors as $author) {
    if (!empty($author['lastname'])) {
      $author_names[] = $author['lastname'];
    }
  }
  return $author_names[0];
}

/**
 * Return only alphanumeric characters and remove specific words from sorting.
 */
function csc_views_search_api_property_sort_stripped_node_title_getter_callback($item) {
  $title = preg_replace('/[^A-Za-z0-9]/', '', $item->title);
  $wordlist = array('a', 'an', 'the');
  $stripped_title = str_ireplace($wordlist, '', $title);
  return $stripped_title;
}

/**
 * Return empty publication years with the current year + 1 year for it to be placed on the last row of views result.
 */
function csc_views_search_api_property_sort_custom_publication_year_getter_callback($item) {
  // We assign numeric equivalent for specific values, so we could use them for sorting
  switch ($item->biblio_year) {
    case '0':
      $year = date('Y', strtotime('+1 year'));
      break;
    case 'Submitted':
      $year = '1';
      break;
    case 'In Press':
      $year = '2';
      break;
    default:
    $year = $item->biblio_year;
  }    
  return $year;
}

/**
 * Returns publication type value.
 */
function csc_views_search_api_property_biblio_publication_type_getter_callback($item) {
  $node = node_load($item->nid);
  return $node->biblio_type;
}

/**
 * Implements hook_block_info().
 */
function csc_views_block_info() {
  $blocks['custom_sort_filter'] = array(
    'info' => t('Custom views filter'),
  );
  $blocks['custom_taxonomy_block'] = array(
    'info' => t('Custom taxonomy block'),
    'region' => 'sidebar_first',
  );
  $blocks['custom_taxonomy_breadcrumb'] = array(
    'info' => t('Custom taxonomy breadcrumb'),
    'region' => 'content',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function csc_views_block_view($delta = '') {
  $vocabulary = taxonomy_vocabulary_machine_name_load('collections');
  $vid  = $vocabulary->vid;
  if (!search_landing_page()) {
    $custom_sort_block_content = '<span>Sort by </span><select id="edit-custom-sort" name="custom_sort" class="form-select">
      <option value="default" selected="selected">Default</option>
      <optgroup label="Title"><option value="title_asc">A-Z</option><option value="title_desc">Z-A</option></optgroup>
      <optgroup label="Author"><option value="author_asc">A-Z</option><option value="author_desc">Z-A</option></optgroup>
      <optgroup label="Year"><option value="year_asc">1492-2014</option><option value="year_desc">2014-1492</option></optgroup>
    </select>';
  }
  else {
    $custom_sort_block_content = '';
  }
  switch ($delta) {
    case 'custom_sort_filter':
      $block['subject'] = '';
      $block['content'] = $custom_sort_block_content;
      break;
    case 'custom_taxonomy_block':
      $block['subject'] = (search_landing_page()) ? t('Browse') : '';
      $block['content'] = (search_landing_page()) ? csc_views_generate_list(csc_views_build_taxonomy_tree($vid, 0)) : '';
      break;
    case 'custom_taxonomy_breadcrumb':
      $block['subject'] = t('CSC: Taxonomy Block');
      $block['content'] = (!empty($_GET['field_zotero_collections'])) ? collection_breadcrumb($_GET['field_zotero_collections']) . ' <div class="library-dropdown" style="display: none;">'
      . csc_views_generate_list(csc_views_build_taxonomy_tree($vid, 0)) . '</div>' : '';
      break;
  }
  return $block;
}

/**
 * Generates & returns a nested array of taxonomy terms for the specified vocabulary id.
 */
function csc_views_build_taxonomy_tree($vid, $parent = 0) {
  static $results;
  $args = func_get_args();
  $hash = md5(implode('-', $args));
  if (!isset($results[$hash])) {
    $terms = array();
    $data = taxonomy_get_tree($vid, $parent);
    foreach ($data as $term) {
      $terms[$term->tid] = $term;
    }
    $terms = csc_views_nest_taxonomy_terms($terms, $parent);
    $results[$hash] = $terms;
  }
  return $results[$hash];
}

/**
 * Looks for each term's parent term in the given tree and assigns the child to the parent.
 */
function csc_views_nest_taxonomy_terms($terms, $parent) {
  foreach ($terms as $term) {
    $parent_tid = isset($term->parents[0]) ? $term->parents[0] : 0;
    if ($parent_tid) {
      if (isset($terms[$parent_tid])) {
        $terms[$parent_tid]->children[$term->tid] = $term;
        unset($terms[$term->tid]);
      }
      elseif ($parent_tid != $parent) {
        csc_views_nest_taxonomy_terms_child($terms, $parent_tid, $term);
        unset($terms[$term->tid]);
      }
    }
  }
  return $terms;
}

/**
 * Recursive function which nests the child element within the appropriate parent element in the given terms tree.
 */
function csc_views_nest_taxonomy_terms_child(&$terms, $parent_tid, $child) {
  foreach ($terms as &$term) {
    if ($term->tid == $parent_tid) {
      $term->children[$child->tid] = $child;
      break;
    }
    elseif (!empty($term->children)) {
      csc_views_nest_taxonomy_terms_child($term->children, $parent_tid, $child);
    }
  }
}

/**
 * Generates a nested HTML list from hierarchy items.
 */
function csc_views_generate_list($hierarchy) {
  $items = array();
  foreach ($hierarchy as $term) {
    $class_name = (!empty($term->children)) ? 'has-children' : '';
    $item = l(t($term->name), 'csc-search-dev',  array(
      'query' => array(
        'field_zotero_collections' => $term->tid
      ),
      'attributes' => array(
        'class' => array($class_name)
      ),
    ));
    if (!empty($term->children)) {
      $item .= csc_views_generate_list($term->children);
    }
    $items[] = $item;
  }
  return theme('item_list', array('items' => $items));
}

/**
 *  Returns breadcrumb links.
 */
function collection_breadcrumb($term_id) {
  if ($term_id != 'All') { 
    $vocabulary = taxonomy_vocabulary_machine_name_load('collections');
    $vid  = $vocabulary->vid;
    $get_parents = taxonomy_get_parents_all($term_id);
    $taxonomy_term = array_reverse($get_parents);
    $breadcrumb = '';
    foreach ($taxonomy_term as $key => $term) {
      $breadcrumb .= '<div class="breadcrumb-item">';
      $breadcrumb .= '&nbsp; &#187; &nbsp;';
      $term_list = csc_views_build_taxonomy_tree($vid, $term->tid);
      if ($term_list) {
        $breadcrumb .= l(t($term->name), '',  array(
          'fragment' => '',
          'attributes' => array('class' => 'breadcrumb-dropdown-cta')
        ));
        $breadcrumb_term_child = csc_views_generate_list($term_list);
        $breadcrumb .= '<div class="breadcrumb-child-container" style="display: none;">
        <div class="breadcrumb-child-top">' . l(t('View all sources for ' . $term->name), 'csc-search-dev', array('query' => array('field_zotero_collections' => $term->tid))) . '</div>
        <div class="breadcrumb-child-sub-top">' . l(t($term->name), 'csc-search-dev', array('query' => array('field_zotero_collections' => $term->tid))) . '</div>
        <div class="breadcrumb-child">' . $breadcrumb_term_child . '</div></div>';
      }
      else {
        $breadcrumb .= $term->name;
      }
      $breadcrumb .= '</div>';
    }
  }
  else {
    $breadcrumb = (empty($_GET['biblio_publication_type']) && empty($_GET['biblio_authors']) && empty($_GET['biblio_publisher']) && empty($_GET['biblio_place_published'])
    && empty($_GET['biblio_year']) && empty($_GET['biblio_year_1']) && empty($_GET['field_zotero_tags'])) ? '&nbsp; &#187; &nbsp;Search Results' : '&nbsp; &#187; &nbsp;Search Results (Filtered)';
  }
  $home_link = '<div class="breadcrumb-item">' . l(t('Home'), 'csc-search-dev', array('attributes' => array('class' => array('home-search-page')))) . '&nbsp;</div>';
  $library_link = '<div class="breadcrumb-item">' . l(t('Library'), '', array('attributes' => array('id' => 'collection-library'), 'fragment' => '')) . '</div>';
  return $home_link . ' ' . $library_link . ' ' . $breadcrumb;
}

function search_landing_page() {
  if (!isset($_GET['search_api_views_fulltext']) && !isset($_GET['field_zotero_collections']) && !isset($_GET['sort_by']) && !isset($_GET['sort_order'])) {
    return TRUE;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function csc_views_views_pre_render(&$view) {
  if ($view->name == 'biblio_search_api_dev' && $view->exposed_input && !empty($view->result)) {
    $first_row = ($view->query->pager->current_page != 0) ? ($view->query->pager->current_page * $view->query->pager->options['items_per_page']) + 1 : 1;
    $last_row = ($first_row + count($view->result)) - 1;
    $max_page = ceil($view->query->pager->total_items/$view->query->pager->options['items_per_page']);
    $next_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? custom_pager_links($view, '>', $view->query->pager->current_page + 1) : '';
    $prev_page_link = ($view->query->pager->current_page != 0) ? custom_pager_links($view, '<', $view->query->pager->current_page - 1) : '';
    $current_page = $view->query->pager->current_page + 1;
    $first_page_link = ($view->query->pager->current_page != 0) ? custom_pager_links($view, '<<', 0) : '';
    $last_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? custom_pager_links($view, '>>', $max_page - 1) : '';
    $view->attachment_after = '<div class="custom-footer-pager"><div class="custom-footer-pager-left">Displaying ' . $first_row . ' - ' . $last_row . ' of ' 
    . $view->query->pager->total_items . ' found</div><div class="custom-footer-pager-right">' . $first_page_link . ' ' . $prev_page_link . '<input type="text" 
    name="pager-input" id="pager-input" value="' . $current_page . '"/>of ' . $max_page . ' ' . $next_page_link . ' ' . $last_page_link . '</div><input type="hidden" value="' 
    . $max_page . '" id="max-page-input"></div>';
  }
}

/**
 * Returns custom pager link.
 */
function custom_pager_links($view, $pager_text, $pager_link) {
  $search_text = ($view->exposed_raw_input['search_api_views_fulltext']) ? $view->exposed_raw_input['search_api_views_fulltext'] : '';
  $source_type = ($view->exposed_raw_input['biblio_publication_type']) ? $view->exposed_raw_input['biblio_publication_type'] : '';
  $authors = ($view->exposed_raw_input['biblio_authors']) ? $view->exposed_raw_input['biblio_authors'] : '';
  $publishers = ($view->exposed_raw_input['biblio_publisher']) ? $view->exposed_raw_input['biblio_publisher'] : '';
  $published_location = ($view->exposed_raw_input['biblio_place_published']) ? $view->exposed_raw_input['biblio_place_published'] : '';
  $year_from = ($view->exposed_raw_input['biblio_year']) ? $view->exposed_raw_input['biblio_year'] : '';
  $year_to = ($view->exposed_raw_input['biblio_year_1']) ? $view->exposed_raw_input['biblio_year_1'] : '';
  $tags = ($view->exposed_raw_input['field_zotero_tags']) ? $view->exposed_raw_input['field_zotero_tags'] : '';;
  $collection_filter = ($view->exposed_raw_input['field_zotero_collections']) ? $view->exposed_raw_input['field_zotero_collections'] : '';
  $sort_by = ($view->exposed_raw_input['sort_by']) ? $view->exposed_raw_input['sort_by'] : '';
  $sort_order = ($view->exposed_raw_input['sort_order']) ? $view->exposed_raw_input['sort_order'] : '';
  $link_output = l($pager_text, arg(0), array(
    'query' => array(
      'search_api_views_fulltext' => $search_text,
      'biblio_publication_type' => $source_type,
      'biblio_authors' => $authors,
      'biblio_publisher' => $publishers,
      'biblio_place_published' => $published_location,
      'biblio_year' => $year_from,
      'biblio_year_1' => $year_to,
      'field_zotero_tags' => $tags,
      'field_zotero_collections' => $collection_filter,
      'sort_by' => $sort_by,
      'sort_order' => $sort_order,
      'page' => $pager_link,
    )
  ));
  return $link_output;
}

/**
 * Returns publication types.
 */
function csc_views_publication_type() {
  $publication = array('' => 'Select');
  $query = db_query('SELECT tid, name FROM {biblio_types}');
  foreach ($query as $data) {
    $publication[$data->tid] = $data->name;
  }
  return $publication;
}

/**
 * Returns indexed authors.
 */
function csc_views_indexed_author() {
  $author = array('' => 'Select');
  $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_authors} WHERE value <> :val', array(':val' => ''));
  foreach ($query as $data) {
    $author[$data->value] = $data->value;
  }
  return $author;
}
 
/**
 * Returns indexed publishers.
 */
function csc_views_indexed_publisher() {
  $publisher = array('' => 'Select');
  $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_publisher} WHERE value <> :val', array(':val' => ''));
  foreach ($query as $data) {
    $publisher[$data->value] = $data->value;
  }
  return $publisher;
}

/**
 * Returns indexed publish location.
 */
function csc_views_indexed_location() {
  $location = array('' => 'Select');
  $query = db_query('SELECT DISTINCT value FROM {search_api_db_database_node_index_biblio_place_published} WHERE value <> :val', array(':val' => ''));
  foreach ($query as $data) {
    $location[$data->value] = $data->value;
  }
  return $location;
}
 
/**
 * Returns zotero tags.
 */
function csc_views_zotero_tags() {
  $tag = array('' => 'Select');
  $zotero_vocabulary = taxonomy_vocabulary_machine_name_load('zotero_tags');
  $tree = taxonomy_get_tree($zotero_vocabulary->vid);
  foreach ($tree as $term) {
    $tag[$term->tid] = $term->name;
  }
  return $tag;
}
