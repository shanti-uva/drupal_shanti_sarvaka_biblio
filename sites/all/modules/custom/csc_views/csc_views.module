<?php
/**
 * @file
 * Custom views functionalities for CSC site.
 */

/**
 * Implements hook_form_alter().
 */
function csc_views_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'biblio_search_api_dev' && $form_state['view']->current_display == 'page') {
    $form['sort_by']['#prefix'] = '<div style="display: none;">';
    $form['sort_by']['#suffix'] = '</div>';
    $form['sort_order']['#prefix'] = '<div style="display: none;">';
    $form['sort_order']['#suffix'] = '</div>';
    $form['field_zotero_collections']['#prefix'] = '<div style="display: none;">';
    $form['field_zotero_collections']['#suffix'] = '</div>';
    if (!empty($form_state['input']['search_api_views_fulltext']) || !empty($form_state['input']['field_zotero_collections'])) {
      $form['custom_sort'] = array(
        '#type' => 'select',
        '#title' => 'Sort',
        '#options' => array(
          'default' => t('Default'),
          'Title' => array(
            'title_asc' => t('A-Z'),
            'title_desc' => t('Z-A')
          ),
          'Author' => array(
            'author_asc' => t('A-Z'),
            'author_desc' => t('Z-A')
          ),
          'Year' => array(
            'year_asc' => t('1492-2014'),
            'year_desc' => t('2014-1492')
          ),
        ),
      );
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function csc_views_entity_property_info_alter(&$info) {
 $info['node']['properties']['sort_biblio_author'] = array(
   'type' => 'text',
   'label' => t('Sorting Biblio Author'),
   'getter callback' => 'csc_views_search_api_property_sort_biblio_author_getter_callback',
 );
 $info['node']['properties']['sort_stripped_node_title'] = array(
   'type' => 'text',
   'label' => t('Sorting Stripped Node Title'),
   'getter callback' => 'csc_views_search_api_property_sort_stripped_node_title_getter_callback',
 );
 $info['node']['properties']['sort_custom_publication_year'] = array(
   'type' => 'text',
   'label' => t('Sorting Custom Publication Year'),
   'getter callback' => 'csc_views_search_api_property_sort_custom_publication_year_getter_callback',
 );
}

/**
 * Returns node biblio author value.
 */
function csc_views_search_api_property_sort_biblio_author_getter_callback($item) {
  $node = node_load($item->nid);
  $author_names = array();
  foreach ($node->biblio_contributors as $author) {
    if (!empty($author['lastname'])) {
      $author_names[] = $author['lastname'];
    }
  }
  return $author_names[0];
}

/**
 * Return only alphanumeric characters.
 */
function csc_views_search_api_property_sort_stripped_node_title_getter_callback($item) {
  return preg_replace('/[^A-Za-z0-9]/', '', $item->title);
}

/**
 * Return empty publication years with the current year + 1 year for it to be placed on the last row of views result.
 */
function csc_views_search_api_property_sort_custom_publication_year_getter_callback($item) {
  // We assign numeric equivalent for specific values, so we could use them for sorting
  switch ($item->biblio_year) {
    case '0':
      $year = date('Y', strtotime('+1 year'));
      break;
    case 'Submitted':
      $year = '1';
      break;
    case 'In Press':
      $year = '2';
      break;
    default:
    $year = $item->biblio_year;
  }    
  return $year;
}

/**
 * Implements hook_views_pre_render().
 */
function csc_views_views_pre_render(&$view) {
  if ($view->name == 'biblio_search_api_dev' && $view->exposed_input) {
    $first_row = ($view->query->pager->current_page != 0) ? ($view->query->pager->current_page * $view->query->pager->options['items_per_page']) + 1 : 1;
    $last_row = ($first_row + count($view->result)) - 1;
    $max_page = ceil($view->query->pager->total_items/$view->query->pager->options['items_per_page']);
    $next_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? custom_pager_links($view, '>', $view->query->pager->current_page + 1) : '';
    $prev_page_link = ($view->query->pager->current_page != 0) ? custom_pager_links($view, '<', $view->query->pager->current_page - 1) : '';
    $current_page = $view->query->pager->current_page + 1;
    $first_page_link = ($view->query->pager->current_page != 0) ? custom_pager_links($view, '<<', 0) : '';
    $last_page_link = ($view->query->pager->current_page != ($max_page - 1)) ? custom_pager_links($view, '>>', $max_page - 1) : '';
    $view->attachment_after = '<div class="custom-footer-pager"><div class="custom-footer-pager-left">Displaying ' . $first_row . ' - ' . $last_row . ' of ' 
    . $view->query->pager->total_items . ' found</div><div class="custom-footer-pager-right">' . $first_page_link . ' ' . $prev_page_link . '<input type="text" 
    name="pager-input" id="pager-input" value="' . $current_page . '"/>of ' . $max_page . ' ' . $next_page_link . ' ' . $last_page_link . '</div><input type="hidden" value="' . $max_page . '" id="max-page-input"></div>';
  }
}

/**
 * Returns custom pager link.
 */
function custom_pager_links($view, $pager_text, $pager_link) {
  $search_text = ($view->exposed_raw_input['search_api_views_fulltext']) ? $view->exposed_raw_input['search_api_views_fulltext'] : '';
  $sort_by = ($view->exposed_raw_input['sort_by']) ? $view->exposed_raw_input['sort_by'] : '';
  $sort_order = ($view->exposed_raw_input['sort_order']) ? $view->exposed_raw_input['sort_order'] : '';
  $custom_sort = ($view->exposed_raw_input['custom_sort']) ? $view->exposed_raw_input['custom_sort'] : '';
  $link_output = l($pager_text, arg(0), array(
    'query' => array(
      'search_api_views_fulltext' => $search_text,
      'sort_by' => $sort_by,
      'sort_order' => $sort_order,
      'custom_sort' => $custom_sort,
      'page' => $pager_link,
    )
  ));
  return $link_output;
}

